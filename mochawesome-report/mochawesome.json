{
  "stats": {
    "suites": 11,
    "tests": 31,
    "passes": 31,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-07T09:34:41.628Z",
    "end": "2018-04-07T09:34:41.714Z",
    "duration": 86,
    "testsRegistered": 31,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Dashboard",
        "suites": [
          {
            "title": "Render",
            "suites": [
              {
                "title": "Table",
                "suites": [],
                "tests": [
                  {
                    "title": "should render the table headers",
                    "fullTitle": "Render Table should render the table headers",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var tableHeaders = wrapper.find('thead tr');\n(0, _chai.expect)(tableHeaders.childAt(0).text()).equal('From Date');\n(0, _chai.expect)(tableHeaders.childAt(1).text()).equal('To Date');\n(0, _chai.expect)(tableHeaders.childAt(2).text()).equal('Reason');\n(0, _chai.expect)(tableHeaders.childAt(3).text()).equal('Type');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b737a2f-5ff3-4a66-ad96-51d96c9ed223",
                    "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should redenr the correct data in table",
                    "fullTitle": "Render Table should redenr the correct data in table",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var tableRows = wrapper.find('tbody tr');\n(0, _chai.expect)(tableRows.at(0).childAt(0).text()).equal('2018-04-06');\n(0, _chai.expect)(tableRows.at(0).childAt(1).text()).equal('2018-04-08');\n(0, _chai.expect)(tableRows.at(0).childAt(2).text()).equal('Not feeling well');\n(0, _chai.expect)(tableRows.at(0).childAt(3).text()).equal('LOP');\n(0, _chai.expect)(tableRows.at(1).childAt(0).text()).equal('2018-05-06');\n(0, _chai.expect)(tableRows.at(1).childAt(1).text()).equal('2018-05-08');\n(0, _chai.expect)(tableRows.at(1).childAt(2).text()).equal('vacations');\n(0, _chai.expect)(tableRows.at(1).childAt(3).text()).equal('Paid Leaves');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19a359ba-3252-4b57-aa48-b86dfbb43d27",
                    "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/leaves/components/dashboardSpec.js",
                "uuid": "5da8284b-336c-4d78-8998-1738cac0f512",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
                "passes": [
                  {
                    "title": "should render the table headers",
                    "fullTitle": "Render Table should render the table headers",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var tableHeaders = wrapper.find('thead tr');\n(0, _chai.expect)(tableHeaders.childAt(0).text()).equal('From Date');\n(0, _chai.expect)(tableHeaders.childAt(1).text()).equal('To Date');\n(0, _chai.expect)(tableHeaders.childAt(2).text()).equal('Reason');\n(0, _chai.expect)(tableHeaders.childAt(3).text()).equal('Type');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b737a2f-5ff3-4a66-ad96-51d96c9ed223",
                    "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should redenr the correct data in table",
                    "fullTitle": "Render Table should redenr the correct data in table",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var tableRows = wrapper.find('tbody tr');\n(0, _chai.expect)(tableRows.at(0).childAt(0).text()).equal('2018-04-06');\n(0, _chai.expect)(tableRows.at(0).childAt(1).text()).equal('2018-04-08');\n(0, _chai.expect)(tableRows.at(0).childAt(2).text()).equal('Not feeling well');\n(0, _chai.expect)(tableRows.at(0).childAt(3).text()).equal('LOP');\n(0, _chai.expect)(tableRows.at(1).childAt(0).text()).equal('2018-05-06');\n(0, _chai.expect)(tableRows.at(1).childAt(1).text()).equal('2018-05-08');\n(0, _chai.expect)(tableRows.at(1).childAt(2).text()).equal('vacations');\n(0, _chai.expect)(tableRows.at(1).childAt(3).text()).equal('Paid Leaves');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19a359ba-3252-4b57-aa48-b86dfbb43d27",
                    "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "should render NewLeave button",
                "fullTitle": "Dashboard Render should render NewLeave button",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
                "err": {},
                "isRoot": false,
                "uuid": "52fb2018-29c9-436d-9f1a-cbe08fd76533",
                "parentUUID": "1034259d-9366-42ca-b92e-9ba7a0759a8d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/dashboardSpec.js",
            "uuid": "1034259d-9366-42ca-b92e-9ba7a0759a8d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
            "passes": [
              {
                "title": "should render NewLeave button",
                "fullTitle": "Dashboard Render should render NewLeave button",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
                "err": {},
                "isRoot": false,
                "uuid": "52fb2018-29c9-436d-9f1a-cbe08fd76533",
                "parentUUID": "1034259d-9366-42ca-b92e-9ba7a0759a8d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "Event Handlers",
            "suites": [],
            "tests": [
              {
                "title": "should navigate to new leave page when clicked on New Leave button",
                "fullTitle": "Dashboard Event Handlers should navigate to new leave page when clicked on New Leave button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9d4966c3-0752-4fcd-b637-65e00311ce7e",
                "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should make an action to fetch leaves when component is loaded",
                "fullTitle": "Dashboard Event Handlers should make an action to fetch leaves when component is loaded",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(fetchLeavesStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "943b1534-bfc0-4e96-9756-03bea3b6c296",
                "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/dashboardSpec.js",
            "uuid": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
            "passes": [
              {
                "title": "should navigate to new leave page when clicked on New Leave button",
                "fullTitle": "Dashboard Event Handlers should navigate to new leave page when clicked on New Leave button",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9d4966c3-0752-4fcd-b637-65e00311ce7e",
                "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should make an action to fetch leaves when component is loaded",
                "fullTitle": "Dashboard Event Handlers should make an action to fetch leaves when component is loaded",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(fetchLeavesStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "943b1534-bfc0-4e96-9756-03bea3b6c296",
                "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/components/dashboardSpec.js",
        "uuid": "17f8d7f9-e239-46c3-9569-2ca3fe4c7778",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Dashboard \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_dashboard2.default, { navigateToNewLeave: navigateToNewLeaveStub, fetchLeaves: fetchLeavesStub, leaves: leaves }));",
            "err": {},
            "isRoot": false,
            "uuid": "46a488dc-aaa4-4ce2-a313-bef6a8889248",
            "parentUUID": "17f8d7f9-e239-46c3-9569-2ca3fe4c7778",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/dashboardSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Leave Form Component",
        "suites": [
          {
            "title": "Render",
            "suites": [],
            "tests": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "4fbefc3a-e627-48ae-afeb-a4f9a7f5645b",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "d3b6ee2e-378a-44ba-a59a-a39ad2e606ef",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "1aaa95e3-57a4-4fb5-92f6-810f348983f4",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "1d9385a7-2f68-4da2-ac86-6b8c9c3e9ac0",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "e887b23b-f885-46c9-b0d5-839db1287380",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "c1be2ffa-e380-413b-b9b2-a3e3744c8124",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "9582789e-d547-4532-8d6f-2f18f510cc6d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should have the correct form name",
                "fullTitle": "Leave Form Component Render should have the correct form name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
                "err": {},
                "isRoot": false,
                "uuid": "4fbefc3a-e627-48ae-afeb-a4f9a7f5645b",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render fromDate",
                "fullTitle": "Leave Form Component Render should render fromDate",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
                "err": {},
                "isRoot": false,
                "uuid": "d3b6ee2e-378a-44ba-a59a-a39ad2e606ef",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render toDate",
                "fullTitle": "Leave Form Component Render should render toDate",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
                "err": {},
                "isRoot": false,
                "uuid": "1aaa95e3-57a4-4fb5-92f6-810f348983f4",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render reason",
                "fullTitle": "Leave Form Component Render should render reason",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
                "err": {},
                "isRoot": false,
                "uuid": "1d9385a7-2f68-4da2-ac86-6b8c9c3e9ac0",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render leaveType",
                "fullTitle": "Leave Form Component Render should render leaveType",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
                "err": {},
                "isRoot": false,
                "uuid": "e887b23b-f885-46c9-b0d5-839db1287380",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render Submit Button",
                "fullTitle": "Leave Form Component Render should render Submit Button",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
                "err": {},
                "isRoot": false,
                "uuid": "c1be2ffa-e380-413b-b9b2-a3e3744c8124",
                "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "Event Handlers",
            "suites": [],
            "tests": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "172f2615-8f69-4d7a-8c91-7e07ac14da21",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "8bceb770-550d-45af-8c5f-296afc9f1ff2",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "e035ece6-a92f-48ec-9780-38e1643df6bb",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "875357e9-ebd2-451b-943a-f7367de8b751",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "b94dce39-3c07-41e4-8b63-839cbcdc9999",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/leaves/components/leaveFormSpec.js",
            "uuid": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
            "passes": [
              {
                "title": "should update fromDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update fromDate when it is changed",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "172f2615-8f69-4d7a-8c91-7e07ac14da21",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update toDate when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update toDate when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
                "err": {},
                "isRoot": false,
                "uuid": "8bceb770-550d-45af-8c5f-296afc9f1ff2",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update reason when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update reason when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
                "err": {},
                "isRoot": false,
                "uuid": "e035ece6-a92f-48ec-9780-38e1643df6bb",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update leave type when it is changed",
                "fullTitle": "Leave Form Component Event Handlers should update leave type when it is changed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
                "err": {},
                "isRoot": false,
                "uuid": "875357e9-ebd2-451b-943a-f7367de8b751",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should submit leave when clicked on Submit",
                "fullTitle": "Leave Form Component Event Handlers should submit leave when clicked on Submit",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "b94dce39-3c07-41e4-8b63-839cbcdc9999",
                "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 7,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/components/leaveFormSpec.js",
        "uuid": "4ca1f02c-dd73-4ad8-b14c-f4099e2ae18b",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Component \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_leaveForm2.default, { fetchLeave: fetchLeaveStub, submitLeave: submitLeaveStub, leaves: [] }));",
            "err": {},
            "isRoot": false,
            "uuid": "3b74c3fd-9ca3-42c3-9279-e17b8ffb1120",
            "parentUUID": "4ca1f02c-dd73-4ad8-b14c-f4099e2ae18b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/components/leaveFormSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Dashboard Container",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch an action to navigate To New Leave",
            "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
            "err": {},
            "isRoot": false,
            "uuid": "ee3f9cb4-5a3f-4010-9708-d6f0ca23f4a7",
            "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should pass leaves to connected component",
            "fullTitle": "Dashboard Container should pass leaves to connected component",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leaves = [{ dummy: 'dummy' }];\nvar store = mockStore({ leaves: { leaves: leaves } });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\n(0, _chai.expect)(shallowWrapper.prop('leaves')).deep.equal(leaves);",
            "err": {},
            "isRoot": false,
            "uuid": "e4569bb8-1934-41eb-9394-bd72e7b923ec",
            "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch an action to fetch leaves",
            "fullTitle": "Dashboard Container should dispatch an action to fetch leaves",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var store = mockStore({ leaves: {} });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeaves')();\n(0, _chai.expect)(store.getActions()[0].type).deep.equal('LEAVE_FETCHING');",
            "err": {},
            "isRoot": false,
            "uuid": "1e829cc3-f94f-4f86-b846-2ec5a20114d6",
            "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/container/dashboardSpec.js",
        "uuid": "4aa19279-6e83-44cc-8b04-a1900288102b",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Dashboard Container \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(\n    _reactRedux.Provider,\n    { store: store },\n    _react2.default.createElement(_dashbord2.default, null)\n));",
            "err": {},
            "isRoot": false,
            "uuid": "0d342ff7-61b7-4f1c-a067-5451e0e546eb",
            "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/container/dashboardSpec.js",
        "passes": [
          {
            "title": "should dispatch an action to navigate To New Leave",
            "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
            "err": {},
            "isRoot": false,
            "uuid": "ee3f9cb4-5a3f-4010-9708-d6f0ca23f4a7",
            "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should pass leaves to connected component",
            "fullTitle": "Dashboard Container should pass leaves to connected component",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leaves = [{ dummy: 'dummy' }];\nvar store = mockStore({ leaves: { leaves: leaves } });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\n(0, _chai.expect)(shallowWrapper.prop('leaves')).deep.equal(leaves);",
            "err": {},
            "isRoot": false,
            "uuid": "e4569bb8-1934-41eb-9394-bd72e7b923ec",
            "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch an action to fetch leaves",
            "fullTitle": "Dashboard Container should dispatch an action to fetch leaves",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var store = mockStore({ leaves: {} });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeaves')();\n(0, _chai.expect)(store.getActions()[0].type).deep.equal('LEAVE_FETCHING');",
            "err": {},
            "isRoot": false,
            "uuid": "1e829cc3-f94f-4f86-b846-2ec5a20114d6",
            "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 11,
        "rootEmpty": false
      },
      {
        "title": "Leave Form Container",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "47cf5f8b-498f-489c-a155-38c5191afdc8",
            "parentUUID": "55d9839e-51dd-401b-95c6-6c70aa996a96",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/container/leaveFormSpec.js",
        "uuid": "55d9839e-51dd-401b-95c6-6c70aa996a96",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leave Form Container \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wrapper = (0, _enzyme.shallow)(_react2.default.createElement(\n    _reactRedux.Provider,\n    { store: store },\n    _react2.default.createElement(_leaveForm2.default, { params: { leaveId: 1234 } })\n));",
            "err": {},
            "isRoot": false,
            "uuid": "7fd2c616-021e-40f3-9a63-835f1bc26cc1",
            "parentUUID": "55d9839e-51dd-401b-95c6-6c70aa996a96",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/container/leaveFormSpec.js",
        "passes": [
          {
            "title": "should dispatch an action to fetch a leave",
            "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
            "err": {},
            "isRoot": false,
            "uuid": "47cf5f8b-498f-489c-a155-38c5191afdc8",
            "parentUUID": "55d9839e-51dd-401b-95c6-6c70aa996a96",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2,
        "rootEmpty": false
      },
      {
        "title": "Leaves Action",
        "suites": [],
        "tests": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "ad29a793-001d-4dfd-afb7-aeef6ac472a3",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "af8e7b4c-7d8b-4d07-aabb-cc0b4e347574",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "db21406d-f215-410c-a505-97ec1d85cc2b",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "e487f002-4d9f-4c1a-9135-55fbb10cd95e",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch an action to fetch the leaves",
            "fullTitle": "Leaves Action should dispatch an action to fetch the leaves",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "db742233-fa81-4aff-9e09-455b94886712",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch an action to fetch the leaves when it returns the error",
            "fullTitle": "Leaves Action should dispatch an action to fetch the leaves when it returns the error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(500, { error: 'error' });\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('error occurred');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "0b2eda08-f986-4226-b4da-b1dd025dac40",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesActionSpec.js",
        "uuid": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Leaves Action \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mockStore = (0, _reduxMockStore2.default)([_reduxThunk2.default]);\napi = (0, _nock2.default)(_http.config.serverUrl);",
            "err": {},
            "isRoot": false,
            "uuid": "b43304fb-9b0c-4f3e-b69a-54d0f1ad6f85",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Leaves Action \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = mockStore({});",
            "err": {},
            "isRoot": false,
            "uuid": "e56b034c-defc-4868-83a7-75cf47b0229a",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Leaves Action \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store.clearActions();\n_nock2.default.cleanAll();",
            "err": {},
            "isRoot": false,
            "uuid": "5b3cb339-7fb4-4f5f-8c8d-f175293d958c",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesActionSpec.js",
        "passes": [
          {
            "title": "should dispatch correct action when fetchLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "ad29a793-001d-4dfd-afb7-aeef6ac472a3",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when fetchLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "af8e7b4c-7d8b-4d07-aabb-cc0b4e347574",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "db21406d-f215-410c-a505-97ec1d85cc2b",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch correct action when submitLeave is called and returned error",
            "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "e487f002-4d9f-4c1a-9135-55fbb10cd95e",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch an action to fetch the leaves",
            "fullTitle": "Leaves Action should dispatch an action to fetch the leaves",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "db742233-fa81-4aff-9e09-455b94886712",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should dispatch an action to fetch the leaves when it returns the error",
            "fullTitle": "Leaves Action should dispatch an action to fetch the leaves when it returns the error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var request = api.get('/leaves').reply(500, { error: 'error' });\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('error occurred');\n    done();\n}).catch(done);",
            "err": {},
            "isRoot": false,
            "uuid": "0b2eda08-f986-4226-b4da-b1dd025dac40",
            "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 19,
        "rootEmpty": false
      },
      {
        "title": "Leaves Reducer",
        "suites": [],
        "tests": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "c4782588-a702-48f7-ad38-7b2ea7692b06",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "f583d328-d09f-4ff3-9034-bae12f645d9b",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "f411c256-0f0e-4225-a1a2-47cd2b3740bc",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "a00315af-02e8-47de-9eea-1ee15b0f9ae1",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with modified leaves when LEAVES_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with modified leaves when LEAVES_FETCHED action is received",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leaves = [{ dummy: 'dummy' }];\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: leaves };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal(leaves);",
            "err": {},
            "isRoot": false,
            "uuid": "8ee0bdbf-86b8-4fa4-ba02-4479d793a85b",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/leaves/leavesReducerSpec.js",
        "uuid": "09ae851c-89ac-445a-b1b9-81b35f7592da",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/kunalhire/workspace/leave-management-system/test/leaves/leavesReducerSpec.js",
        "passes": [
          {
            "title": "should return the initial state",
            "fullTitle": "Leaves Reducer should return the initial state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
            "err": {},
            "isRoot": false,
            "uuid": "c4782588-a702-48f7-ad38-7b2ea7692b06",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
            "err": {},
            "isRoot": false,
            "uuid": "f583d328-d09f-4ff3-9034-bae12f645d9b",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
            "err": {},
            "isRoot": false,
            "uuid": "f411c256-0f0e-4225-a1a2-47cd2b3740bc",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
            "err": {},
            "isRoot": false,
            "uuid": "a00315af-02e8-47de-9eea-1ee15b0f9ae1",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a new state with modified leaves when LEAVES_FETCHED action is received",
            "fullTitle": "Leaves Reducer should return a new state with modified leaves when LEAVES_FETCHED action is received",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var leaves = [{ dummy: 'dummy' }];\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: leaves };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal(leaves);",
            "err": {},
            "isRoot": false,
            "uuid": "8ee0bdbf-86b8-4fa4-ba02-4479d793a85b",
            "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "e517f060-aa17-4736-afee-c65bc47541f5",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should render NewLeave button",
      "fullTitle": "Render should render NewLeave button",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
      "err": {},
      "isRoot": false,
      "uuid": "52fb2018-29c9-436d-9f1a-cbe08fd76533",
      "parentUUID": "1034259d-9366-42ca-b92e-9ba7a0759a8d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render the table headers",
      "fullTitle": "Table should render the table headers",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tableHeaders = wrapper.find('thead tr');\n(0, _chai.expect)(tableHeaders.childAt(0).text()).equal('From Date');\n(0, _chai.expect)(tableHeaders.childAt(1).text()).equal('To Date');\n(0, _chai.expect)(tableHeaders.childAt(2).text()).equal('Reason');\n(0, _chai.expect)(tableHeaders.childAt(3).text()).equal('Type');",
      "err": {},
      "isRoot": false,
      "uuid": "4b737a2f-5ff3-4a66-ad96-51d96c9ed223",
      "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should redenr the correct data in table",
      "fullTitle": "Table should redenr the correct data in table",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tableRows = wrapper.find('tbody tr');\n(0, _chai.expect)(tableRows.at(0).childAt(0).text()).equal('2018-04-06');\n(0, _chai.expect)(tableRows.at(0).childAt(1).text()).equal('2018-04-08');\n(0, _chai.expect)(tableRows.at(0).childAt(2).text()).equal('Not feeling well');\n(0, _chai.expect)(tableRows.at(0).childAt(3).text()).equal('LOP');\n(0, _chai.expect)(tableRows.at(1).childAt(0).text()).equal('2018-05-06');\n(0, _chai.expect)(tableRows.at(1).childAt(1).text()).equal('2018-05-08');\n(0, _chai.expect)(tableRows.at(1).childAt(2).text()).equal('vacations');\n(0, _chai.expect)(tableRows.at(1).childAt(3).text()).equal('Paid Leaves');",
      "err": {},
      "isRoot": false,
      "uuid": "19a359ba-3252-4b57-aa48-b86dfbb43d27",
      "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should navigate to new leave page when clicked on New Leave button",
      "fullTitle": "Event Handlers should navigate to new leave page when clicked on New Leave button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "9d4966c3-0752-4fcd-b637-65e00311ce7e",
      "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should make an action to fetch leaves when component is loaded",
      "fullTitle": "Event Handlers should make an action to fetch leaves when component is loaded",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)(fetchLeavesStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "943b1534-bfc0-4e96-9756-03bea3b6c296",
      "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "4fbefc3a-e627-48ae-afeb-a4f9a7f5645b",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "d3b6ee2e-378a-44ba-a59a-a39ad2e606ef",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "1aaa95e3-57a4-4fb5-92f6-810f348983f4",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "1d9385a7-2f68-4da2-ac86-6b8c9c3e9ac0",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "e887b23b-f885-46c9-b0d5-839db1287380",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "c1be2ffa-e380-413b-b9b2-a3e3744c8124",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "172f2615-8f69-4d7a-8c91-7e07ac14da21",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "8bceb770-550d-45af-8c5f-296afc9f1ff2",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "e035ece6-a92f-48ec-9780-38e1643df6bb",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "875357e9-ebd2-451b-943a-f7367de8b751",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "b94dce39-3c07-41e4-8b63-839cbcdc9999",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to navigate To New Leave",
      "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
      "err": {},
      "isRoot": false,
      "uuid": "ee3f9cb4-5a3f-4010-9708-d6f0ca23f4a7",
      "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pass leaves to connected component",
      "fullTitle": "Dashboard Container should pass leaves to connected component",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaves = [{ dummy: 'dummy' }];\nvar store = mockStore({ leaves: { leaves: leaves } });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\n(0, _chai.expect)(shallowWrapper.prop('leaves')).deep.equal(leaves);",
      "err": {},
      "isRoot": false,
      "uuid": "e4569bb8-1934-41eb-9394-bd72e7b923ec",
      "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch leaves",
      "fullTitle": "Dashboard Container should dispatch an action to fetch leaves",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var store = mockStore({ leaves: {} });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeaves')();\n(0, _chai.expect)(store.getActions()[0].type).deep.equal('LEAVE_FETCHING');",
      "err": {},
      "isRoot": false,
      "uuid": "1e829cc3-f94f-4f86-b846-2ec5a20114d6",
      "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "47cf5f8b-498f-489c-a155-38c5191afdc8",
      "parentUUID": "55d9839e-51dd-401b-95c6-6c70aa996a96",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "ad29a793-001d-4dfd-afb7-aeef6ac472a3",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "af8e7b4c-7d8b-4d07-aabb-cc0b4e347574",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "db21406d-f215-410c-a505-97ec1d85cc2b",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "e487f002-4d9f-4c1a-9135-55fbb10cd95e",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch the leaves",
      "fullTitle": "Leaves Action should dispatch an action to fetch the leaves",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "db742233-fa81-4aff-9e09-455b94886712",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch the leaves when it returns the error",
      "fullTitle": "Leaves Action should dispatch an action to fetch the leaves when it returns the error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(500, { error: 'error' });\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('error occurred');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "0b2eda08-f986-4226-b4da-b1dd025dac40",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "c4782588-a702-48f7-ad38-7b2ea7692b06",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "f583d328-d09f-4ff3-9034-bae12f645d9b",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "f411c256-0f0e-4225-a1a2-47cd2b3740bc",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "a00315af-02e8-47de-9eea-1ee15b0f9ae1",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with modified leaves when LEAVES_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with modified leaves when LEAVES_FETCHED action is received",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaves = [{ dummy: 'dummy' }];\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: leaves };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal(leaves);",
      "err": {},
      "isRoot": false,
      "uuid": "8ee0bdbf-86b8-4fa4-ba02-4479d793a85b",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should render NewLeave button",
      "fullTitle": "Render should render NewLeave button",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\n(0, _chai.expect)(newLeaveBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(newLeaveBtn.prop('children')).equal('New Leave');",
      "err": {},
      "isRoot": false,
      "uuid": "52fb2018-29c9-436d-9f1a-cbe08fd76533",
      "parentUUID": "1034259d-9366-42ca-b92e-9ba7a0759a8d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render the table headers",
      "fullTitle": "Table should render the table headers",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tableHeaders = wrapper.find('thead tr');\n(0, _chai.expect)(tableHeaders.childAt(0).text()).equal('From Date');\n(0, _chai.expect)(tableHeaders.childAt(1).text()).equal('To Date');\n(0, _chai.expect)(tableHeaders.childAt(2).text()).equal('Reason');\n(0, _chai.expect)(tableHeaders.childAt(3).text()).equal('Type');",
      "err": {},
      "isRoot": false,
      "uuid": "4b737a2f-5ff3-4a66-ad96-51d96c9ed223",
      "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should redenr the correct data in table",
      "fullTitle": "Table should redenr the correct data in table",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tableRows = wrapper.find('tbody tr');\n(0, _chai.expect)(tableRows.at(0).childAt(0).text()).equal('2018-04-06');\n(0, _chai.expect)(tableRows.at(0).childAt(1).text()).equal('2018-04-08');\n(0, _chai.expect)(tableRows.at(0).childAt(2).text()).equal('Not feeling well');\n(0, _chai.expect)(tableRows.at(0).childAt(3).text()).equal('LOP');\n(0, _chai.expect)(tableRows.at(1).childAt(0).text()).equal('2018-05-06');\n(0, _chai.expect)(tableRows.at(1).childAt(1).text()).equal('2018-05-08');\n(0, _chai.expect)(tableRows.at(1).childAt(2).text()).equal('vacations');\n(0, _chai.expect)(tableRows.at(1).childAt(3).text()).equal('Paid Leaves');",
      "err": {},
      "isRoot": false,
      "uuid": "19a359ba-3252-4b57-aa48-b86dfbb43d27",
      "parentUUID": "5da8284b-336c-4d78-8998-1738cac0f512",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should navigate to new leave page when clicked on New Leave button",
      "fullTitle": "Event Handlers should navigate to new leave page when clicked on New Leave button",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var newLeaveBtn = wrapper.find('Button');\nnewLeaveBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(navigateToNewLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "9d4966c3-0752-4fcd-b637-65e00311ce7e",
      "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should make an action to fetch leaves when component is loaded",
      "fullTitle": "Event Handlers should make an action to fetch leaves when component is loaded",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)(fetchLeavesStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "943b1534-bfc0-4e96-9756-03bea3b6c296",
      "parentUUID": "9d35d9c3-3180-44c0-b692-f7c83ec826b5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have the correct form name",
      "fullTitle": "Render should have the correct form name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var title = wrapper.find('h2');\n(0, _chai.expect)(title.text()).equal(\"Leave Management System\");",
      "err": {},
      "isRoot": false,
      "uuid": "4fbefc3a-e627-48ae-afeb-a4f9a7f5645b",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render fromDate",
      "fullTitle": "Render should render fromDate",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\n(0, _chai.expect)(fromDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(fromDate.prop('type')).equal('date');\n(0, _chai.expect)(fromDate.prop('label')).equal('From');",
      "err": {},
      "isRoot": false,
      "uuid": "d3b6ee2e-378a-44ba-a59a-a39ad2e606ef",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render toDate",
      "fullTitle": "Render should render toDate",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\n(0, _chai.expect)(toDate.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(toDate.prop('type')).equal('date');\n(0, _chai.expect)(toDate.prop('label')).equal('To');",
      "err": {},
      "isRoot": false,
      "uuid": "1aaa95e3-57a4-4fb5-92f6-810f348983f4",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render reason",
      "fullTitle": "Render should render reason",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\n(0, _chai.expect)(reason.type()).equal(_fieldGroup2.default);\n(0, _chai.expect)(reason.prop('type')).equal('text');\n(0, _chai.expect)(reason.prop('label')).equal('Reason');",
      "err": {},
      "isRoot": false,
      "uuid": "1d9385a7-2f68-4da2-ac86-6b8c9c3e9ac0",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render leaveType",
      "fullTitle": "Render should render leaveType",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormGroup');\n(0, _chai.expect)(leaveType.find('ControlLabel').prop('children')).equal('Leave Type');\nvar options = leaveType.find('FormControl');\n(0, _chai.expect)(options.childAt(0).prop('children')).equal('Paid Leaves');\n(0, _chai.expect)(options.childAt(1).prop('children')).equal('Leave Without Pay');\n(0, _chai.expect)(options.childAt(2).prop('children')).equal('Compensation Off');",
      "err": {},
      "isRoot": false,
      "uuid": "e887b23b-f885-46c9-b0d5-839db1287380",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should render Submit Button",
      "fullTitle": "Render should render Submit Button",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\n(0, _chai.expect)(submitBtn.type()).equal(_reactBootstrap.Button);\n(0, _chai.expect)(submitBtn.prop('children')).equal('Submit');",
      "err": {},
      "isRoot": false,
      "uuid": "c1be2ffa-e380-413b-b9b2-a3e3744c8124",
      "parentUUID": "9582789e-d547-4532-8d6f-2f18f510cc6d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update fromDate when it is changed",
      "fullTitle": "Event Handlers should update fromDate when it is changed",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var fromDate = wrapper.find('#fromDate');\nfromDate.simulate('change', { target: { value: '2018-04-01' } });\n(0, _chai.expect)(wrapper.state().fromDate.toString()).equal('Sun Apr 01 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "172f2615-8f69-4d7a-8c91-7e07ac14da21",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update toDate when it is changed",
      "fullTitle": "Event Handlers should update toDate when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var toDate = wrapper.find('#toDate');\ntoDate.simulate('change', { target: { value: '2018-04-03' } });\n(0, _chai.expect)(wrapper.state().toDate.toString()).equal('Tue Apr 03 2018 02:00:00 GMT+0200 (CEST)');",
      "err": {},
      "isRoot": false,
      "uuid": "8bceb770-550d-45af-8c5f-296afc9f1ff2",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update reason when it is changed",
      "fullTitle": "Event Handlers should update reason when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var reason = wrapper.find('#reason');\nreason.simulate('change', { target: { value: 'Vacations' } });\n(0, _chai.expect)(wrapper.state().reason.toString()).equal('Vacations');",
      "err": {},
      "isRoot": false,
      "uuid": "e035ece6-a92f-48ec-9780-38e1643df6bb",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update leave type when it is changed",
      "fullTitle": "Event Handlers should update leave type when it is changed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaveType = wrapper.find('FormControl');\nleaveType.simulate('change', { target: { value: 'LOP' } });\n(0, _chai.expect)(wrapper.state().type.toString()).equal('LOP');",
      "err": {},
      "isRoot": false,
      "uuid": "875357e9-ebd2-451b-943a-f7367de8b751",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should submit leave when clicked on Submit",
      "fullTitle": "Event Handlers should submit leave when clicked on Submit",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var submitBtn = wrapper.find('#submitBtn');\nsubmitBtn.simulate('click', { preventDefault: function preventDefault() {} });\n(0, _chai.expect)(submitLeaveStub.called).equal(true);",
      "err": {},
      "isRoot": false,
      "uuid": "b94dce39-3c07-41e4-8b63-839cbcdc9999",
      "parentUUID": "57ab7e2a-2835-4038-a6ca-36d5610f2fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to navigate To New Leave",
      "fullTitle": "Dashboard Container should dispatch an action to navigate To New Leave",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('navigateToNewLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('@@router/CALL_HISTORY_METHOD');\n(0, _chai.expect)(executedAction.payload).deep.equal({ method: 'push', args: ['new'] });",
      "err": {},
      "isRoot": false,
      "uuid": "ee3f9cb4-5a3f-4010-9708-d6f0ca23f4a7",
      "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pass leaves to connected component",
      "fullTitle": "Dashboard Container should pass leaves to connected component",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaves = [{ dummy: 'dummy' }];\nvar store = mockStore({ leaves: { leaves: leaves } });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\n(0, _chai.expect)(shallowWrapper.prop('leaves')).deep.equal(leaves);",
      "err": {},
      "isRoot": false,
      "uuid": "e4569bb8-1934-41eb-9394-bd72e7b923ec",
      "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch leaves",
      "fullTitle": "Dashboard Container should dispatch an action to fetch leaves",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var store = mockStore({ leaves: {} });\nvar shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeaves')();\n(0, _chai.expect)(store.getActions()[0].type).deep.equal('LEAVE_FETCHING');",
      "err": {},
      "isRoot": false,
      "uuid": "1e829cc3-f94f-4f86-b846-2ec5a20114d6",
      "parentUUID": "4aa19279-6e83-44cc-8b04-a1900288102b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch a leave",
      "fullTitle": "Leave Form Container should dispatch an action to fetch a leave",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var shallowWrapper = wrapper.dive({ context: { store: store } });\nshallowWrapper.prop('fetchLeave')();\nvar executedAction = store.getActions()[0];\n(0, _chai.expect)(executedAction.type).equal('LEAVE_FETCHING');\n(0, _chai.expect)(executedAction.leaveId).equal(1234);",
      "err": {},
      "isRoot": false,
      "uuid": "47cf5f8b-498f-489c-a155-38c5191afdc8",
      "parentUUID": "55d9839e-51dd-401b-95c6-6c70aa996a96",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves/1234').reply(200, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[1].leave).to.deep.equal(leaveFormStub);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "ad29a793-001d-4dfd-afb7-aeef6ac472a3",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when fetchLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when fetchLeave is called and returned error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.get('/leaves/1234').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.fetchLeave(1234)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('Unable to retrieve the leave with id 1234: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "af8e7b4c-7d8b-4d07-aabb-cc0b4e347574",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.post('/leaves/').reply(201, leaveFormStub);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHED);\n    (0, _chai.expect)(executedActions[0].resp).to.deep.equal(leaveFormStub);\n    (0, _chai.expect)(executedActions[1].type).to.equal('@@router/CALL_HISTORY_METHOD');\n    (0, _chai.expect)(executedActions[1].payload).to.deep.equal({ method: 'push', args: ['/'] });\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "db21406d-f215-410c-a505-97ec1d85cc2b",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch correct action when submitLeave is called and returned error",
      "fullTitle": "Leaves Action should dispatch correct action when submitLeave is called and returned error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'error' };\nvar request = api.post('/leaves/').reply(500, error);\nstore.dispatch(_leavesActions.leavesActions.submitLeave(leaveFormStub)).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[0].error).to.deep.equal('Unable to submit the leave: 500 (Internal Server Error)');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "e487f002-4d9f-4c1a-9135-55fbb10cd95e",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch the leaves",
      "fullTitle": "Leaves Action should dispatch an action to fetch the leaves",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(200, [leaveFormStub]);\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVES_FETCHED);\n    (0, _chai.expect)(executedActions[1].leaves).to.deep.equal([leaveFormStub]);\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "db742233-fa81-4aff-9e09-455b94886712",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should dispatch an action to fetch the leaves when it returns the error",
      "fullTitle": "Leaves Action should dispatch an action to fetch the leaves when it returns the error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var request = api.get('/leaves').reply(500, { error: 'error' });\nstore.dispatch(_leavesActions.leavesActions.fetchLeaves()).then(function (resp) {\n    request.done();\n    var executedActions = store.getActions();\n    (0, _chai.expect)(executedActions[0].type).to.equal(_leavesActions.constants.LEAVE_FETCHING);\n    (0, _chai.expect)(executedActions[1].type).to.equal(_leavesActions.constants.LEAVE_ERROR);\n    (0, _chai.expect)(executedActions[1].error).to.deep.equal('error occurred');\n    done();\n}).catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "0b2eda08-f986-4226-b4da-b1dd025dac40",
      "parentUUID": "2d5195c6-dc45-46ae-998b-443d9d1eaae0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the initial state",
      "fullTitle": "Leaves Reducer should return the initial state",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _chai.expect)((0, _leavesReducer2.default)(undefined, {})).deep.equal({ leaves: [], leave: {} });",
      "err": {},
      "isRoot": false,
      "uuid": "c4782588-a702-48f7-ad38-7b2ea7692b06",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHING action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var action = { type: _leavesActions.constants.LEAVE_FETCHING };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.status).to.equal(\"LOADING\");",
      "err": {},
      "isRoot": false,
      "uuid": "f583d328-d09f-4ff3-9034-bae12f645d9b",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_FETCHED action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leave = { dummy: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_FETCHED, leave: leave };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leave).deep.equal(leave);",
      "err": {},
      "isRoot": false,
      "uuid": "f411c256-0f0e-4225-a1a2-47cd2b3740bc",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "fullTitle": "Leaves Reducer should return a new state with status LOADING when a LEAVE_ERROR action is received",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var error = { error: 'dummy' };\nvar action = { type: _leavesActions.constants.LEAVE_ERROR, error: error };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.error).deep.equal(error);",
      "err": {},
      "isRoot": false,
      "uuid": "a00315af-02e8-47de-9eea-1ee15b0f9ae1",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return a new state with modified leaves when LEAVES_FETCHED action is received",
      "fullTitle": "Leaves Reducer should return a new state with modified leaves when LEAVES_FETCHED action is received",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var leaves = [{ dummy: 'dummy' }];\nvar action = { type: _leavesActions.constants.LEAVES_FETCHED, leaves: leaves };\nvar updatedState = (0, _leavesReducer2.default)(undefined, action);\n(0, _chai.expect)(updatedState.leaves).deep.equal(leaves);",
      "err": {},
      "isRoot": false,
      "uuid": "8ee0bdbf-86b8-4fa4-ba02-4479d793a85b",
      "parentUUID": "09ae851c-89ac-445a-b1b9-81b35f7592da",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}